<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Settings;
use AppBundle\Model\MainObjectabeleInterface;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping;

/**
 * SettingsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SettingsRepository extends \Doctrine\ORM\EntityRepository
{
    private $toClasses;

    public function __construct(EntityManager $em, Mapping\ClassMetadata $class)
    {
        parent::__construct($em, $class);

        $this->toClasses = [ Settings::IS_DOCUMENT=>'AppBundle\Entity\Document',
            Settings::IS_DOCUMENTS_LIST=>'AppBundle\Entity\DocumentsList',
            Settings::IS_TEXT=>'AppBundle\Entity\Text',
            Settings::IS_TEXT_AREA=>'AppBundle\Entity\Text',
            Settings::IS_BOOLEAN=>'AppBundle\Entity\Boolean',
            Settings::IS_IMAGE=>'AppBundle\Entity\File',
            Settings::IS_VIDEO=>'AppBundle\Entity\File',
            Settings::IS_FILE=>'AppBundle\Entity\File',
            Settings::IS_DATE=>'AppBundle\Entity\Date'];
    }

    public function findFrom($fromId, $fromClass){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('s')
            ->from('AppBundle:Settings', 's')
            ->where('s.fromClassName = :fc')
            ->andWhere('s.fromId = :fId')
            ->setParameter('fc', $fromClass)
            ->setParameter('fId', $fromId)
            ->orderBy('s.position', 'ASC')
            ->getQuery()->getResult()
            ;
    }


    public function getViuewData($object, $id){

        $getSettingsQuery = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('s.toClassType, s.toId, s.position, s.name, s.slug')
            ->from('AppBundle:Settings', 's')
            ->where('s.fromId = :fid')
            ->andWhere('s.fromClassName = :fcl')
            ->orderBy('s.position')

        ;

        $queryParams = $getSettingsQuery->setParameter('fid', $id)
            ->setParameter('fcl', $object);

        $settings = $queryParams->getQuery()->getResult();

        $result = [];

        foreach ($settings as $key=>$setting){

            $item = $this->getEntityManager()
                ->createQueryBuilder()
                ->select('p')
                ->from($this->toClasses[$setting['toClassType']], 'p')
                ->where('p.id = :pid')

                ->setParameter('pid', $setting['toId'])
                ->getQuery()->getOneOrNullResult()
            ;

            $result[$setting['position']]['setting'] = $setting;
            $result[$setting['position']]['item'] = $item;

            if($item instanceof MainObjectabeleInterface){

                $parent = [];
                $objectSettings = $getSettingsQuery->setParameter('fid', $setting['toId'])
                    ->setParameter('fcl', $this->toClasses[$setting['toClassType']])
                    ->getQuery()->getResult();

                foreach ($objectSettings as $set){

                    $items = $this->getEntityManager()
                        ->createQueryBuilder()
                        ->select('p')
                        ->from($this->toClasses[$set['toClassType']], 'p')
                        ->where('p.id = :pid')

                        ->setParameter('pid', $set['toId'])
                        ->getQuery()->getOneOrNullResult()
                    ;


                    $parent[$set['position']] = $items;
                    $parent[$set['position']] = $items;
                }

                $result[$setting['position']]['parent'] = $parent;
            }

        }

        return $result;
    }

    public function findKoko($object, $id){


        $settings =  $this->getEntityManager()

            ->createQueryBuilder()
            ->select('s')
            ->from('AppBundle:Settings', 's')
            ->where('s.fromClassName = :tclN')
            ->andWhere('s.fromId = :fId')
            ->setParameter('tclN', $object)
            ->setParameter('fId', $id)
            ->getQuery()->getResult()

            ;

        $data = [];
        foreach ($settings as $setting){

           $dt = $this->getEntityManager()->getRepository($setting->getToClassName())->find($setting->getToId());

            $data[$setting->getPosition()] = $dt;

        }

        return $data;
    }

    /**
     * @param $object
     * @param $slug
     * @return array|null
     */
     public function findPage($object, $slug){


         $qPage = $this->getEntityManager()
             ->createQueryBuilder()
             ->select('p.id')
             ->from('AppBundle:Pages', 'p')
             ->where('p.slug = :sl')
             ->setParameter('sl', $slug)
             ->getQuery()->getOneOrNullResult()
         ;

         $settings = null;

         if(!is_null($qPage)){

             $settings =  $this->getEntityManager()

                 ->createQueryBuilder()
                 ->select('s')
                 ->from('AppBundle:Settings', 's')
                 ->where('s.fromClassName = :tclN')
                 ->andWhere('s.fromId = :fId')
                 ->setParameter('tclN', $object)
                 ->setParameter('fId', $qPage['id'])
                 ->getQuery()->getResult()

             ;
         }

        return $settings;
    }


    /**
     * this function used to find settings of page
     * @param $calassName
     * @param $pagetId
     * @return array
     */
    public function findSettingsPage($calassName, $pagetId){

         return $this->getEntityManager()
             ->createQueryBuilder()
             ->select('s.id, s.name, s.slug, s.fromId, s.toId, s.fromClassName, s.toClassName, s.toClassType')
             ->from('AppBundle:Settings', 's')
             ->where('s.fromId = :fId')
             ->andWhere('s.fromClassName = :clN')
             ->orderBy('s.position','ASC')
             ->setParameter('fId', $pagetId)
             ->setParameter('clN', $calassName)
             ->getQuery()->getResult()
             ;
    }


    /**
     * this function used to find settings of page by array
     * @param $calassName
     * @param $pagetId
     * @return array
     */
    public function findSettingsPageArray($calassName, $pagetId){

         return $this->getEntityManager()
             ->createQueryBuilder()
             ->select('s.id, s.name, s.slug, s.fromId, s.toId, s.fromClassName, s.toClassName, s.toClassType')
             ->from('AppBundle:Settings', 's')
             ->where('s.fromId = :fId')
             ->andWhere('s.fromClassName = :clN')
             ->orderBy('s.position','ASC')
             ->setParameter('fId', $pagetId)
             ->setParameter('clN', $calassName)
             ->getQuery()->getArrayResult()
             ;
    }


}
